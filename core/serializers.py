from rest_framework import serializers
from .models import User, Customer, Order, Payment, Meal

# User serializer
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = '__all__'

# customer serializer
class CustomerSerializer(serializers.ModelSerializer):
    class Meta:
        model = Customer
        fields = ['id', 'full_name', 'phone_number', 'email', 'date_created']
        read_only_fields = ['id', 'date_created']

        # Ensure that API does not send blank values for the name
        def validate_full_name(self, value):
            if not value or not value.strip():
                raise serializers.ValidationError("Fullname is required")
            return value

# meal serializer
class MealSerializer(serializers.ModelSerializer):
    class Meta:
        model = Meal
        fields = ['id', 'name', 'description', 'price']
        read_only_fields = ['id'] # ID is autogenerated, hence readonly

        def validate_name(self, value):
            if not value or not value.strip():
                raise serializers.ValidationError("Meal name is required")
            return value


# order serializer
class OrderSerializer(serializers.ModelSerializer):
    #Has foreign customer, meal and user. I don't want them to be displayed as IDs so I will nest them
    customer_name = CustomerSerializer(source='customer.full_name', read_only=True)
    meal_name = MealSerializer(source='meal.name', read_only=True)
    class Meta:
        model = Order
        fields = [
            'id',
            'customer', # FK to Customer (input as ID)
            'customer_name', # Customer name readonly
            'meal', # FK to Meal (input as ID)
            'meal_name', # Meal name readonly
            'quantity',
            'total_price', # Calculated automatically
            'created_at',
            'is_paid',
            'created_by', # FK to User (Input as ID)
        ]

        read_only_fields = ['id', 'created_at', 'total_price']

    # Quantity validator Ensure its a positive value
    def validate_quantity(self, value):
        if value <= 0:
            raise serializers.ValidationError("Quantity must be greator than zero")
        return value
    
    def create(self, validated_data):
        # Compute total_price before saving the order
        meal = validated_data["meal"]
        quantity = validated_data["quantity"]
        validated_data["total_price"] = meal.price * quantity
        return super().create(validated_data)
    
    def update(self, instance, validated_data):
        # Recalculate total if meal or quanity changes
        meal = validated_data.get("meal", instance.meal)
        quantity = validated_data.get("quantity", instance.quantity)
        validated_data["total_price"] = meal.price * quantity
        return super().update(instance, validated_data)
    